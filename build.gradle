plugins {
	id 'java'
	id 'net.minecrell.licenser' version '0.4.1'
}

repositories {
	jcenter()
}

dependencies {
	testImplementation 'org.springframework.boot:spring-boot-starter-websocket:2.0.5.RELEASE'
	testImplementation 'org.webjars:webjars-locator:0.34'
}

license {
	tasks {
		directory {
			files = project.files( 'src/' )
		}
	}

	style {
		put( 'ts', 'BLOCK_COMMENT' )
		put( 'html', new net.minecrell.gradle.licenser.header.CommentHeaderFormat( 'HTML', ~/^\s*<!--/, ~/-->\s*(.*?)$/, null, '<!--', '', '-->' ) )
	}

	header = file( 'LICENSE_HEADER' )

	include '**/*.java'
	include '**/*.ts'
	include '**/*.js'
	include '**/*.html'

	exclude '**/META-INF/**'
	exclude '**/javascript/**'
	exclude '**/pixi.js'
	exclude '**/pixi.js.map'
	exclude '**/pixi.min.js'
	exclude '**/pixi.min.js.map'
}

task compileCheatsheet() {
	def source = 'docs/cheatsheet/_src';
	def destination = 'docs/cheatsheet/all-in-one.md';
	inputs.dir( source )
	outputs.file( destination )

	doLast {
		String header = '# Cheatsheet\n\n';
		String contents = file( source ).listFiles().sort{ it.name }.collect{ it.text }.join( "\n" );
		String toc = '## Table of contents\n\n' + contents.split( '\n' )
		.findAll{
			it.trim().startsWith( '##' )
		}
		.collect{
			boolean isSubSection = it.startsWith( '###' );
			String trimmed = it.substring( isSubSection ? 3 : 2 ).trim();
			String anchor = trimmed.toLowerCase().replaceAll( '[^a-zA-Z0-9- ]', '' ).replaceAll( ' +', '-' );
			return (isSubSection ? '\t' : '') + '* [' + trimmed + '](#' + anchor + ')';
		}
		.join( '\n' ) + '\n\n';
		(new File( destination )).text = header + toc + contents;
	}
}

task copyPixiJSToSampleDir( type: Copy ) {
	from 'node_modules/pixi.js/dist/'
	into 'docs/sample/js'
}

task copyJSToSampleDir( type: Copy, dependsOn: copyPixiJSToSampleDir ) {
	from 'dist'
	into 'docs/sample/js'
	include 'wcardinal-ui.js'
	include 'wcardinal-ui.min.js'
	include 'wcardinal-ui.min.js.map'
}
